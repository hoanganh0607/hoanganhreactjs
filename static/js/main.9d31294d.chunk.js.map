{"version":3,"sources":["components/Status.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["Status","props","progress","currentQuestion","totalQuestion","currentQuestionNew","className","style","width","progressBar","Question","quiz","quizzes","display","displayQuestion","question","answers","map","answer","index","userSelectClass","key","onClick","selectQuestion","answerTrue","displayWrongAnswer","displayQuestionButton","nextQuestion","displayScore","score","displayResultButton","result","displayResult","playReload","playReloadButton","ANSWER_TIME","App","state","isSelectAnswer","scoreNew","newUserSelectClass","selectClass","i","setState","newWrongAnswer","WrongAnswer","length","console","log","displayPlayReload","window","location","reload","timeLeft","this","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d31294d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Status(props) {\n  const progress = (props.currentQuestion / props.totalQuestion) * 100;  \n  const currentQuestionNew = props.currentQuestion + 1\n  return (\n    <div className=\"Header\">\n      <div className=\"LeftSide\">\n        <div className=\"ProgressBar\" style={{ width: (progress + props.progressBar) * 350 / 100}} >\n          <span className=\"Percent\">Tiến độ: {progress + props.progressBar}%</span>\n        </div>\n      </div>\n      <div className=\"RightSide\">\n        <div className=\"CurrentQuestion\">{currentQuestionNew}/{props.totalQuestion}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Status;\n","import React from \"react\";\n\n\nfunction Question(props) {\n  const quiz = props.quizzes[props.currentQuestion];\n\n  return (\n    <main>\n      <div className=\"Body\" style={{display: props.displayQuestion}}>\n        <div className=\"Question\">{quiz.question}</div>\n        <div className=\"PossibleAnwsers\">\n          {quiz.answers.map((answer, index) => (\n            <div\n            className={props.userSelectClass[index]}\n              key={index}\n              onClick={() => {\n                props.selectQuestion(index, answer, quiz.answerTrue);\n              }}\n            >\n              <div className=\"AnswerIndex\">{index}</div>\n              <div className=\"AnswerContent\">{answer}</div>\n              <div className=\"WrongAnswer\" style={{display: props.displayWrongAnswer[index]}}>Không chính xác, đáp án đúng là: {quiz.answerTrue}</div>\n              \n            </div>\n          ))}\n        </div>\n        \n      </div>\n      <div className=\"Footer\">\n        <button className=\"Button ButtonSmall btn btn-secondary btn-new score\" style={{display: props.displayQuestionButton}} onClick={props.nextQuestion} >\n          Câu hỏi tiếp theo\n        </button>\n        <div className=\"score\" style={{display: props.displayScore}}>Số câu trả lời đúng: {props.score}</div>\n        <button className=\"Button ButtonSmall btn btn-secondary btn-new score\" style={{display: props.displayResultButton}} onClick={props.result}>Hoàn thành</button>\n      </div>\n\n      <div className=\"result\" style={{display: props.displayResult}}>\n        <div className=\"resultPlay\">Chúc mừng bạn đã hoàn thành phần chơi</div>\n        <div>Số câu trả lời đúng của bạn là: {props.score}</div>\n        <div className=\"playReload\" style={{display: props.playReload}} onClick={props.playReloadButton}>Chơi lại</div>\n      </div>\n    </main>\n  );\n}\n\nexport default Question;\n","import React from \"react\";\nimport \"./App.css\";\nimport Status from \"./components/Status\";\nimport Question from \"./components/Question\";\n\nconst ANSWER_TIME = 10;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizzes: [\n        {\n          question: \"Con chó đi bằng mấy chân?\",\n          answers: [\"1 chân\", \"2 chân\", \"3 chân\", \"4 chân\"],\n          answerTrue: \"4 chân\"\n        },\n        {\n          question: \"Con mèo đi bằng mấy chân?\",\n          answers: [\"1 chân\", \"2 chân\", \"3 chân\", \"4 chân\"],\n          answerTrue: \"4 chân\"\n        },\n        {\n          question: \"Con người đi bằng mấy chân?\",\n          answers: [\"1 chân\", \"2 chân\", \"3 chân\", \"4 chân\"],\n          answerTrue: \"2 chân\"\n        },\n        {\n          question: \"Con chim cánh cụt đi bằng mấy chân?\",\n          answers: [\"1 chân\", \"2 chân\", \"3 chân\", \"4 chân\"],\n          answerTrue: \"2 chân\"\n        },\n        {\n          question: \"Con cá sấu đi bằng mấy chân?\",\n          answers: [\"1 chân\", \"2 chân\", \"3 chân\", \"4 chân\"],\n          answerTrue: \"4 chân\"\n        },\n      ],\n      timeLeft: ANSWER_TIME,\n      currentQuestion: 0,\n      userSelectClass: [\"Answer\", \"Answer\", \"Answer\", \"Answer\", \"Answer\"],\n      isSelectAnswer: false,\n      progressBar: 0,\n      displayQuestion: \"block\",\n      displayResultButton: \"none\",\n      displayQuestionButton: \"block\",\n      displayResult: \"none\",\n      displayScore: \"inline-block\",\n      displayPlayReload: \"none\",\n      displayWrongAnswer: [\"none\", \"none\", \"none\", \"none\", \"none\"],\n      score: 0\n    }\n  }\n\n\n  selectQuestion = (index, answer, answerTrue) => {\n    if (!this.state.isSelectAnswer) {\n      // Highlight đáp án người dùng chọn\n      // TODO: Hiển thị đáp án đúng sai và tính điểm\n      const scoreNew = this.state.score\n      const newUserSelectClass = this.state.userSelectClass.map(\n        (selectClass, i) => {\n          if (i === index && answer === answerTrue) {\n            selectClass = \"Answer true\";\n            this.setState({\n              score: scoreNew + 1\n            })\n          }\n          if (i === index && answer !== answerTrue) {\n            selectClass = \"Answer false\";\n            this.setState({\n              displayWrongAnswer: \"block\",\n            })\n          }\n          return selectClass;\n        }\n      );\n      //Hiển thị đáp án đúng khi trả lời sai\n      const newWrongAnswer = this.state.displayWrongAnswer.map(\n        (WrongAnswer, i) => {\n          if (i === index && answer !== answerTrue) {\n            WrongAnswer = \"inline-block\";\n          }\n          return WrongAnswer;\n        }\n      );\n      this.setState({\n        displayWrongAnswer: newWrongAnswer,\n        userSelectClass: newUserSelectClass,\n        isSelectAnswer: true,\n\n      });\n    }\n  };\n\n  //Chuyển câu hỏi\n  nextQuestion = () => {\n    if (this.state.currentQuestion < this.state.quizzes.length - 1) {\n      console.log(this.progressBar)\n      this.setState({\n        userSelectClass: [\"Answer\", \"Answer\", \"Answer\", \"Answer\", \"Answer\"],\n        displayWrongAnswer: [\"none\", \"none\", \"none\", \"none\", \"none\"],\n        currentQuestion: this.state.currentQuestion + 1,\n        isSelectAnswer: false,\n      });\n    }\n    //Hiển thị nút hoàn thành\n    if (this.state.currentQuestion + 1 === this.state.quizzes.length) {\n      this.setState(state => ({\n        displayQuestionButton: \"none\",\n        displayResultButton: \"block\",\n        //hiển thị thanh tiến độ 100%\n        progressBar: 100 - ((state.quizzes.length - 1) / state.quizzes.length * 100)\n      }));\n    }\n  }\n  //Kết quả phần chơi\n  result = () => {\n    this.setState({\n      displayResult: \"block\",\n      displayQuestion: \"none\",\n      displayScore: \"none\",\n      displayResultButton: \"none\",\n      displayPlayReload: \"inline-block\"\n    });\n  }\n  //Chơi lại\n  playReloadButton = () => {\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <div className=\"Box\">\n          <Status\n            totalQuestion={this.state.quizzes.length}\n            currentQuestion={this.state.currentQuestion}\n            progressBar={this.state.progressBar}\n\n          />\n          <Question\n            totalQuestion={this.state.quizzes.length}\n            quizzes={this.state.quizzes}\n            currentQuestion={this.state.currentQuestion}\n            \n            nextQuestion={this.nextQuestion}\n            displayQuestion={this.state.displayQuestion}\n            displayResult={this.state.displayResult}\n            result={this.result}\n            displayQuestionButton={this.state.displayQuestionButton}\n            displayResultButton={this.state.displayResultButton}\n            score={this.state.score}\n            displayScore={this.state.displayScore}\n            selectQuestion={this.selectQuestion}\n            userSelectClass={this.state.userSelectClass}\n            playReload={this.state.displayPlayReload}\n            playReloadButton={this.playReloadButton}\n            displayWrongAnswer={this.state.displayWrongAnswer}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}