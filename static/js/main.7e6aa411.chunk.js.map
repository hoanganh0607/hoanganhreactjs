{"version":3,"sources":["components/Status.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["Status","props","progress","currentQuestion","totalQuestion","currentQuestionNew","className","style","width","Question","quiz","quizzes","display","displayQuestion","question","answers","map","answer","index","userSelectClass","key","onClick","selectQuestion","answerTrue","displayQuestionButton","nextQuestion","displayScore","score","displayResultButton","result","displayResult","ANSWER_TIME","App","state","isSelectAnswer","scoreNew","newUserSelectClass","selectClass","i","setState","length","timeLeft","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAmBeA,MAjBf,SAAgBC,GACd,IAAMC,EAAYD,EAAME,gBAAkBF,EAAMG,cAAiB,IAC3DC,EAAqBJ,EAAME,gBAAkB,EACnD,OACE,yBAAKG,UAAU,UACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cAAcC,MAAO,CAAEC,MAAqB,IAAZN,EAAmB,MAChE,0BAAMI,UAAU,WAAWJ,EAA3B,OAGJ,yBAAKI,UAAU,aACb,yBAAKA,UAAU,mBAAmBD,EAAlC,IAAuDJ,EAAMG,kBC4BtDK,MAtCf,SAAkBR,GAChB,IAAMS,EAAOT,EAAMU,QAAQV,EAAME,iBAEjC,OACE,8BACE,yBAAKG,UAAU,OAAOC,MAAO,CAACK,QAASX,EAAMY,kBAC3C,yBAAKP,UAAU,YAAYI,EAAKI,UAChC,yBAAKR,UAAU,mBACZI,EAAKK,QAAQC,KAAI,SAACC,EAAQC,GAAT,OAChB,yBACAZ,UAAWL,EAAMkB,gBAAgBD,GAC/BE,IAAKF,EACLG,QAAS,WACPpB,EAAMqB,eAAeJ,EAAOD,EAAQP,EAAKa,cAG3C,yBAAKjB,UAAU,eAAeY,GAC9B,yBAAKZ,UAAU,iBAAiBW,SAKxC,yBAAKX,UAAU,UACb,4BAAQA,UAAU,+CAA+CC,MAAO,CAACK,QAASX,EAAMuB,uBAAwBH,QAASpB,EAAMwB,cAA/H,kCAGA,yBAAKnB,UAAU,QAAQC,MAAO,CAACK,QAASX,EAAMyB,eAA9C,kDAAmFzB,EAAM0B,OACzF,4BAAQrB,UAAU,+CAA+CC,MAAO,CAACK,QAASX,EAAM2B,qBAAsBP,QAASpB,EAAM4B,QAA7H,qBAGF,yBAAKvB,UAAU,SAASC,MAAO,CAACK,QAASX,EAAM6B,gBAC7C,yBAAKxB,UAAU,cAAf,8EACA,uGAAsCL,EAAM0B,UC9B9CI,EAAc,GAyILC,E,YAtIb,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KA0CRqB,eAAiB,SAACJ,EAAOD,EAAQM,GAC/B,IAAK,EAAKU,MAAMC,eAAgB,CAG9B,IAAMC,EAAW,EAAKF,MAAMN,MACtBS,EAAqB,EAAKH,MAAMd,gBAAgBH,KACpD,SAACqB,EAAaC,GAWZ,OATIA,IAAMpB,GAASD,IAAWM,IAC5Bc,EAAc,cACd,EAAKE,SAAS,CACZZ,MAAOQ,EAAW,KAGlBG,IAAMpB,GAASD,IAAWM,IAC5Bc,EAAc,gBAETA,KAIX,EAAKE,SAAS,CACZpB,gBAAiBiB,EACjBF,gBAAgB,MAlEH,EAwEnBT,aAAe,WACT,EAAKQ,MAAM9B,gBAAkB,EAAK8B,MAAMtB,QAAQ6B,OAAS,GAC3D,EAAKD,SAAS,CACZpB,gBAAiB,CAAC,SAAU,SAAU,SAAU,UAChDhB,gBAAiB,EAAK8B,MAAM9B,gBAAkB,EAC9C+B,gBAAgB,IAIhB,EAAKD,MAAM9B,gBAAkB,IAAM,EAAK8B,MAAMtB,QAAQ6B,QACxD,EAAKD,UAAS,SAAAN,GAAK,MAAK,CACtBT,sBAAuB,OACvBI,oBAAqB,aApFR,EA0FnBC,OAAS,WACP,EAAKU,UAAS,SAAAN,GAAK,MAAK,CACtBH,cAAe,QACfjB,gBAAiB,OACjBa,aAAc,OACdE,oBAAqB,YA7FvB,EAAKK,MAAQ,CACXtB,QAAS,CACP,CACEG,SAAU,iDACVC,QAAS,CAAC,IAAK,IAAK,IAAK,KACzBQ,WAAY,KAEd,CACET,SAAU,iDACVC,QAAS,CAAC,IAAK,IAAK,IAAK,KACzBQ,WAAY,KAEd,CACET,SAAU,0DACVC,QAAS,CAAC,IAAK,IAAK,IAAK,KACzBQ,WAAY,KAEd,CACET,SAAU,gEACVC,QAAS,CAAC,IAAK,IAAK,IAAK,KACzBQ,WAAY,KAEd,CACET,SAAU,yDACVC,QAAS,CAAC,IAAK,IAAK,IAAK,KACzBQ,WAAY,MAGhBkB,SAAUV,EACV5B,gBAAiB,EACjBgB,gBAAiB,CAAC,SAAU,SAAU,SAAU,SAAU,UAC1De,gBAAgB,EAChBrB,gBAAiB,QACjBe,oBAAqB,OACrBJ,sBAAuB,QACvBM,cAAe,OACfJ,aAAc,eACdC,MAAO,GAvCQ,E,sEAqGjB,OACE,yBAAKrB,UAAU,uBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CACEF,cAAesC,KAAKT,MAAMtB,QAAQ6B,OAClCrC,gBAAiBuC,KAAKT,MAAM9B,kBAG9B,kBAAC,EAAD,aACEC,cAAesC,KAAKT,MAAMtB,QAAQ6B,OAClC7B,QAAS+B,KAAKT,MAAMtB,QACpBR,gBAAiBuC,KAAKT,MAAM9B,gBAC5BgB,gBAAiBuB,KACjBjB,aAAciB,KAAKjB,aACnBZ,gBAAiB6B,KAAKT,MAAMpB,gBAC5BiB,cAAeY,KAAKT,MAAMH,cAC1BD,OAAQa,KAAKb,OACbL,sBAAuBkB,KAAKT,MAAMT,sBAClCI,oBAAqBc,KAAKT,MAAML,oBAChCD,MAAOe,KAAKT,MAAMN,MAClBD,aAAcgB,KAAKT,MAAMP,aAEzBJ,eAAgBoB,KAAKpB,gBAdvB,kBAemBoB,KAAKT,MAAMd,wB,GA7HtBwB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7e6aa411.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Status(props) {\n  const progress = (props.currentQuestion / props.totalQuestion) * 100;  \n  const currentQuestionNew = props.currentQuestion + 1\n  return (\n    <div className=\"Header\">\n      <div className=\"LeftSide\">\n        <div className=\"ProgressBar\" style={{ width: ((progress) * 350) / 100 }}>\n          <span className=\"Percent\">{progress}%</span>\n        </div>\n      </div>\n      <div className=\"RightSide\">\n        <div className=\"CurrentQuestion\">{currentQuestionNew}/{props.totalQuestion}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Status;\n","import React from \"react\";\n\n\nfunction Question(props) {\n  const quiz = props.quizzes[props.currentQuestion];\n\n  return (\n    <main>\n      <div className=\"Body\" style={{display: props.displayQuestion}}>\n        <div className=\"Question\">{quiz.question}</div>\n        <div className=\"PossibleAnwsers\">\n          {quiz.answers.map((answer, index) => (\n            <div\n            className={props.userSelectClass[index]}\n              key={index}\n              onClick={() => {\n                props.selectQuestion(index, answer, quiz.answerTrue);\n              }}\n            >\n              <div className=\"AnswerIndex\">{index}</div>\n              <div className=\"AnswerContent\">{answer}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"Footer\">\n        <button className=\"Button ButtonSmall btn btn-secondary btn-new\" style={{display: props.displayQuestionButton}} onClick={props.nextQuestion} >\n          Câu hỏi tiếp theo\n        </button>\n        <div className=\"score\" style={{display: props.displayScore}}>Số câu trả lời đúng: {props.score}</div>\n        <button className=\"Button ButtonSmall btn btn-secondary btn-new\" style={{display: props.displayResultButton}} onClick={props.result}>Hoàn thành</button>\n      </div>\n\n      <div className=\"result\" style={{display: props.displayResult}}>\n        <div className=\"resultPlay\">Chúc mừng bạn đã hoàn thành phần chơi</div>\n        <div>Số câu trả lời đúng của bạn là: {props.score}</div>\n      </div>\n    </main>\n  );\n}\n\nexport default Question;\n","import React from \"react\";\nimport \"./App.css\";\nimport Status from \"./components/Status\";\nimport Question from \"./components/Question\";\n\nconst ANSWER_TIME = 10;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizzes: [\n        {\n          question: \"Con chó đi bằng mấy chân?\",\n          answers: [\"1\", \"2\", \"3\", \"4\"],\n          answerTrue: \"4\"\n        },\n        {\n          question: \"Con mèo đi bằng mấy chân?\",\n          answers: [\"1\", \"2\", \"3\", \"4\"],\n          answerTrue: \"4\"\n        },\n        {\n          question: \"Con người đi bằng mấy chân?\",\n          answers: [\"1\", \"2\", \"3\", \"4\"],\n          answerTrue: \"2\"\n        },\n        {\n          question: \"Con chim cánh cụt đi bằng mấy chân?\",\n          answers: [\"1\", \"2\", \"3\", \"4\"],\n          answerTrue: \"2\"\n        },\n        {\n          question: \"Con cá sấu đi bằng mấy chân?\",\n          answers: [\"1\", \"2\", \"3\", \"4\"],\n          answerTrue: \"4\"\n        },\n      ],\n      timeLeft: ANSWER_TIME,\n      currentQuestion: 0,\n      userSelectClass: [\"Answer\", \"Answer\", \"Answer\", \"Answer\", \"Answer\"],\n      isSelectAnswer: false,\n      displayQuestion: \"block\",\n      displayResultButton: \"none\",\n      displayQuestionButton: \"block\",\n      displayResult: \"none\",\n      displayScore: \"inline-block\",\n      score: 0\n    }\n  }\n\n  selectQuestion = (index, answer, answerTrue) => {\n    if (!this.state.isSelectAnswer) {\n      // Highlight đáp án người dùng chọn\n      // TODO: Hiển thị đáp án đúng sai và tính điểm\n      const scoreNew = this.state.score\n      const newUserSelectClass = this.state.userSelectClass.map(\n        (selectClass, i) => {\n\n          if (i === index && answer === answerTrue) {\n            selectClass = \"Answer true\";\n            this.setState({\n              score: scoreNew + 1\n            })\n          }\n          if (i === index && answer !== answerTrue) {\n            selectClass = \"Answer false\";\n          }\n          return selectClass;\n        }\n      );\n\n      this.setState({\n        userSelectClass: newUserSelectClass,\n        isSelectAnswer: true\n      });\n    }\n  };\n\n  //Chuyển câu hỏi\n  nextQuestion = () => {\n    if (this.state.currentQuestion < this.state.quizzes.length - 1) {\n      this.setState({\n        userSelectClass: [\"Answer\", \"Answer\", \"Answer\", \"Answer\"],\n        currentQuestion: this.state.currentQuestion + 1,\n        isSelectAnswer: false\n      });\n    }\n    //Hiển thị nút hoàn thành\n    if (this.state.currentQuestion + 1 === this.state.quizzes.length) {\n      this.setState(state => ({\n        displayQuestionButton: \"none\",\n        displayResultButton: \"block\",\n\n      }));\n    }\n  }\n  //Hoàn thành phần chơi\n  result = () => {\n    this.setState(state => ({\n      displayResult: \"block\",\n      displayQuestion: \"none\",\n      displayScore: \"none\",\n      displayResultButton: \"none\"\n    }));\n\n  }\n\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <div className=\"Box\">\n          <Status\n            totalQuestion={this.state.quizzes.length}\n            currentQuestion={this.state.currentQuestion}\n\n          />\n          <Question\n            totalQuestion={this.state.quizzes.length}\n            quizzes={this.state.quizzes}\n            currentQuestion={this.state.currentQuestion}\n            userSelectClass={this}\n            nextQuestion={this.nextQuestion}\n            displayQuestion={this.state.displayQuestion}\n            displayResult={this.state.displayResult}\n            result={this.result}\n            displayQuestionButton={this.state.displayQuestionButton}\n            displayResultButton={this.state.displayResultButton}\n            score={this.state.score}\n            displayScore={this.state.displayScore}\n\n            selectQuestion={this.selectQuestion}\n            userSelectClass={this.state.userSelectClass}\n\n\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}